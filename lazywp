#!/usr/bin/python3

# import own libs
import src.config as config
from src.logging import Logging

# import python3 standard libraries
import sys, os, subprocess, pkgutil, importlib, curses
from shutil import which

class LAZYWP:
    '''

    Attributes:
       window (obj): the curses wrapper window object
       lazywp_path (str): the path of the lazywp script
       log_level (str): the log level, loaded from the config
       log (obj): the logging system
       commands (dict): the registered commands with their information
       active_command (str): the currently active command
       colors (dict): the registered colors
       key (int): the currently pressed key
       keys (dict): the keymap
       default_keys (dict): default keymaps
       context (int): the current context (1=menu, 2=content)

    Methods:
        register_default_commands(): registers the default commands
        init_default_key_bindings(): inits the default keys of lazywp
        register_commands(): loads the information from the commands
        set_curses_defaults(): sets the default curses settings
        init_curses_colors(): inits the color scheme
    '''
    window = None
    version = '0.1.1'
    lazywp_path = None
    log = None
    log_level = 'NOTSET'
    commands = {}
    active_command = 'plugins'
    colors = {}
    key = 0
    keys = {}
    default_keys = {}
    context = 1

    def __init__(self, window):
        '''

        Parameters:
            window (obj): the curses wrapper window object

        Returns:
            void
        '''

        # set the window object
        self.window = window

        # set local path
        self.lazywp_path = os.path.dirname(os.path.realpath(__file__))

        # init the log system
        self.log_level = config.LOG_LEVEL
        logger = Logging(log_level=self.log_level)
        self.log = logger.logger
        self.log.debug('Starting LAZYWP system')

        # register the default commands
        self.register_default_commands()

        # init default key bindings
        self.init_default_key_bindings()

        # register the commands
        self.register_commands()

        # set curses defaults
        self.set_curses_defaults()

        # set curses colors
        self.init_curses_colors()

    def register_default_commands(self):
        '''
        Registers the default commands

        Returns:
            void
        '''
        self.commands['dashboard'] = {
            'label': 'Dashboard',
            'actions': [],
            'statusbar': []
        }

    def init_default_key_bindings(self):
        '''
        Initializes the default keys and sets up the dict

        Returns:
            void
        '''
        self.default_keys[ord('q')] = 'quit'
        self.default_keys[ord('?')] = 'display_help'

    def register_commands(self):
        '''
        Loads the configuration information from the commands
        and saves them in the command stack

        Returns:
            void
        '''
        self.log.debug("Loading commands")
        commands_path = self.lazywp_path + '/src/commands/'
        commands = [name for _, name, _ in pkgutil.iter_modules([commands_path])]
        for command in commands:
            self.log.debug(f" - {command}")
            command_package = importlib.import_module('src.commands.'+command)
            command_config = command_package.config()
            self.commands[command] = command_config

    def set_curses_defaults(self):
        '''
        Sets the defaults for curses

        Returns:
            void
        '''
        curses.curs_set(0) # hide the cursor

    def init_curses_colors(self):
        '''
        Initializes the color scheme

        Returns:
            void
        '''

        # start the color system
        curses.start_color()

        # black on white
        curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)

        # black on yellow
        curses.init_pair(2, curses.COLOR_YELLOW, curses.COLOR_BLACK)
        # yellow on black
        curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_YELLOW)

        # black on red
        curses.init_pair(4, curses.COLOR_RED, curses.COLOR_BLACK)
        # red on black
        curses.init_pair(5, curses.COLOR_BLACK, curses.COLOR_RED)

        # black on cyan
        curses.init_pair(6, curses.COLOR_CYAN, curses.COLOR_BLACK)
        # cyan on black
        curses.init_pair(7, curses.COLOR_BLACK, curses.COLOR_CYAN)

        # define colors
        self.colors['default'] = curses.color_pair(0)
        self.colors['default_inverted'] = curses.color_pair(1)

    def run(self):
        '''
        Gathers all data from the commands and display them

        Returns:
            void
        '''

        while True:
            # get the pressed key
            self.key = self.window.getch()

            # get the keymap for the currently active command
            self.init_command_key_bindings()

            # check if the keypress is a default key
            if self.key in self.default_keys:
                call = getattr(self, self.default_keys[self.key])
                call()

            # check if one of the registered keys has been pressed
            self.log.debug(self.key)
            self.log.debug(self.keys)
            self.log.debug(self.default_keys)

    def init_command_key_bindings(self):
        '''
        Inits the key bindings for the currently active command

        Returns:
            void
        '''
        command_data = self.commands[self.active_command]
        if command_data['actions']:
            for actions in command_data['actions']:
                self.keys[actions[0]] = actions[1]

    def display_help(self):
        self.log.debug('help')

    def quit(self):
        '''
        Method to quit the system

        Returns:
            void
        '''
        sys.exit()

def lazywp(window):
    '''
    Starts lazywp by initializing the instance    

    Parameters:
        window (obj): the curses wrapper window object

    Returns:
        void
    '''
    lazywp = LAZYWP(window)
    lazywp.run()

def run():
    '''
    Kicks off lazywp by first checking if the system operates
    in the correct environment. It does by checking that
    wpcli is installed (currently as 'wp') and then if the
    active directory is actually a WordPress installation.

    Returns:
        void
    '''

    # check if wpcli is installed. If not we stop the system
    # and display an error message for the user
    wpcli_installed = check_is_wpcli()
    if wpcli_installed == False:
        print('\033[91mError:\033[0m Could not detect wpcli.')
        print('Head to https://wp-cli.org/ and install wpcli.')
        sys.exit()

    # check 
    is_wordpress = check_is_wordpress()
    if is_wordpress == False:
        print('\033[91mError:\033[0m Could not detect WordPress.')
        print('Head to a directory with a WordPress installation in it.')
        sys.exit()

    # start the system
    curses.wrapper(lazywp)

def check_is_wpcli() -> bool:
    '''
    Checks if wpcli is installed as `wp`.

    Returns
        bool: true if wpcli is installed, false if not
    '''
    if which('wp') is not None:
        return True
    return False

def check_is_wordpress() -> bool:
    '''
    Checks if there is WordPress installed on the current active
    directory.

    Returns:
        bool: true if WordPress is present, false if not
    '''
    
    call = subprocess.run(["wp", "core", "is-installed"], capture_output=True)
    if call.returncode != 0:
        return False
    return True

if __name__ == "__main__":
    ''' start lazywp by firing the run method '''
    try:
        run()
    except KeyboardInterrupt:
        try:
            sys.exit(130)
        except SystemExit:
            sys.exit()
            os._exit(130)
